first time
1. blank folder
2. npm init (node already installed) to set up boiler plate
3. npm install express --save
4. node index.js , check outcome at localhost:5000
5. ctrl + c to stop server
6. set up .gitignore, install Git in local computer, run npm install git
7. git init
8. git add .
9. git config --global user.email "eve@example.com"
10. git config --global user.name "EVE"
11. git commit -m "initial commit"
12. set up nodemon (monitor code change) npm install nodemon --save-dev, set up package.json, scripts section
"backend": "nodemon index.js"; npm run backend => at local computer to test locally; now if code changes, just 
need to refresh webpage, no need to stop node and start.
13. routes, npm install body-parser --save
14. npm install @google-cloud/dialogflow --save, create gcp service account, name "dialogflow client", set up key pair json
(follow instructions from github dialogflow depo); key pairs are gdrive webdev folder
15. (not useful)set GOOGLE_APPLICATION_CREDENTIALS="C:\Users\Hairp\Downloads\bot-es-v01-lxgy-b0e2186059fe.json" //set google service account key
16. (not required) in cmd, run: gcloud auth application-default login  ,it will open up browser to confirm log in to my google account, send request use postman web (need to install postman agent)
17. for local test: set up google cloud service account details in dev.js
18. for server test: set up environment parameter in 


every time set up local dev environment
1. vscode, clone/fetch git https://github.com/peacefuljokers/Chatbot_MERN_v01.git
2. npm install - install all the dependencies based on package.json
3. npm run backend

git in VScode
1. initialize repository / publish branch (left pane git logo), branch name is at bottom left corner
2. ï¼ˆoptional) if need to rename branch, shift + ctrl + P => key "rename" and choose "Git rename branch" command in drop down list, 
key in new branch name. normally main branch use "main", or "test branch 1" 
3.  change code, then the git pane will track the change file, click "+" sign to move to staging already
4. input the description of commit at the text box on top and press "commit" button. this check in new code into "main" branch
5. new features in new branch : shift + ctrl + P => key "create" and choose "Git create branch" command in drop down list, input new branch name
6. click on the changed file in git pane, it will highlight changes side by side, can commit back to new branch
7. if need to merge, press bottom left and switch to main branch. from git pane 3 dots, choose branch -> merge branch, choose source branch, commit to main branch



const callback = (req,res)=>{
//do something
}